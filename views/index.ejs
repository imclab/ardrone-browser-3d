<!DOCTYPE html>
<html>
  <head>
    <meta http-equiv="X-UA-Compatible" content="IE=edge,chrome=1">
    <meta name="viewport" content="width=device-width">
    <title><%= title %></title>
    <script src="/js/three.js/three.min.js"></script>
    <script src="/js/three.js/TrackballControls.js"></script>
    <script src="/js/three.js/extras/helpers/ArrowHelper.js"></script>
    <script src="/js/three.js/extras/helpers/AxisHelper.js"></script>
    <script src="/js/navdatas.js"></script>
    <script src="/js/three.js/ColladaLoader.js"></script>
    <script src="/js/jquery.min.js"></script>

    <script type="text/javascript" src="/socket.io/socket.io.js"></script>
    <script type="text/javascript" src="/js/jquery.fullscreen-min.js"></script>
    <script type="text/javascript" src="/js/polyfills.js"></script>
  </head>

    <script>
$(function() {
  var theCamera;
  var theScene;
  var theRenderer;
  var theControls;
  var theDrone;

  var Drone = function(navdata) {
    THREE.Object3D.call(this);
    this.lowVel = 0;
    this.navdata = navdata;1
    this.stepNum = 0;

    var material = new THREE.MeshBasicMaterial({
      color: 0xff0000,
    });
    //this.add(new THREE.AxisHelper(100));
    var loader = new THREE.ColladaLoader();
    var self = this;
    loader.load('assets/ar-drone-2.dae', function(result) {
      d1 = new THREE.Object3D();
      d1.add(result.scene);
      d1.position.y = -3;
      d1.position.x = 2;
      d2 = new THREE.Object3D();
      d2.add(d1);
      //d2.rotation.z = Math.PI / 2;
      self.add(d2);
    });

  }
  Drone.prototype = Object.create(THREE.Object3D.prototype);

  Drone.prototype.step = function() {
    var state = this.navdata[Math.floor(this.stepNum / 3)];
    //console.log(this.stepNum);
    this.stepNum = (this.stepNum + 1) % (this.navdata.length * 3);
    var r = state.demo.drone.camera.rotation;
    var t = state.demo.drone.camera.translation;
    //console.log(r);
    //console.log(this.stepNum / 100.0);
    var m = new THREE.Matrix4(r.m11, r.m12, r.m13, 0,
                              r.m21, r.m22, r.m23, 0,
                              r.m31, r.m32, r.m33, 0,
                              0, 0, 0, 1)
    //this.matrix.extractRotation(m);
    this.matrix = m;
    //this.matrix.translate(t.x, t.y, t.z);
    //this.matrix.scale(4);
    //this.matrix.makeRotationX(this.stepNum / 10.0);
    this.matrixAutoUpdate = false;
    this.updateMatrixWorld(true);
    //console.log(this.matrix);
    //this.updateMatrix();
    //console.log(this.matrix);
    //this.matrix.setPosition(new THREE.Vector3(0, 0, 0));
    
  };

  Drone.prototype.moveTo = function(x, y, z) {
    this.position.x = x;
    this.position.y = y;
    this.position.z = z;
    this.lowVel = 0;
  }


  function vectorArrow(x, y, z, v) {
    if (v.magnitude() < 0.0001) {
      return null;
    }
    var v = v.copy();
    var arrow = new THREE.ArrowHelper(
      new THREE.Vector3(v.x, v.y, v.z),
      new THREE.Vector3(x, y, z),
      v.magnitude() * 150,
      0x44444);
    return arrow;
  }


  function init() {
    theCamera = new THREE.PerspectiveCamera(45, window.innerWidth / window.innerHeight, 1, 1000);
    theCamera.position.x = 0;
    theCamera.position.y = 0;
    theCamera.position.z = 400;
    theCamera.lookAt(new THREE.Vector3(0, 0, 0));

    theScene = new THREE.Scene();
    theScene.add(theCamera);

    theDrone = new Drone(navdata);
    theScene.add(theDrone);

    theScene.add(new THREE.AmbientLight(0x333333));
    var directionalLight = new THREE.DirectionalLight(/*Math.random() * 0xffffff*/0xeeeeee );
    directionalLight.position.x = 50;
    directionalLight.position.y = 50;
    directionalLight.position.z = 500;
    directionalLight.position.normalize();
    theScene.add( directionalLight );


    theRenderer = new THREE.WebGLRenderer({
    'antialias': true
    });
    theRenderer.setSize(window.innerWidth, window.innerHeight);
    theRenderer.setClearColorHex(0xeeeeee, 1);

    // trackback _controls settings.
    var radius = 60;
    theControls = new THREE.TrackballControls(theCamera, theRenderer.domElement);
    theControls.rotateSpeed = 0.5;
    theControls.zoomSpeed = 1.2;
    theControls.panSpeed = 0.2;
    theControls.noZoom = false;
    theControls.noPan = false;
    theControls.staticMoving = false;
    theControls.dynamicDampingFactor = 0.3;
    theControls.minDistance = radius * 1.1;
    theControls.maxDistance = radius * 100;
    theControls.keys = [65, 83, 68]; // [ rotateKey, zoomKey, panKey ]

    document.body.appendChild(theRenderer.domElement);
  }


  function animate() {
    requestAnimationFrame(animate);
    theControls.update();
    theDrone.step();
    theRenderer.render(theScene, theCamera);
  }


  init();
  animate();

});
    </script>
  </body>
</html>
